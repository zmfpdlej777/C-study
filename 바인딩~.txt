 7 바인딩
  - 개념 : 함수 호출과 실제 함수를 연결(ptr)하는 방법
  - 종류 : 정적(default) / 동적(virtual 예약어 사용)
 
 7-1 정적 바인딩(Static)
  - 컴파일 타이밍에 호출될 함수를 결정
  - 객체나 타입을 보고 호출할 함수를 결정 => 실제 객체공간이 아니라, 포인터타입, 레퍼런스 타입을 보고 결정

 7-2 동적 바인딩(Dynamic)
  - 동적 바인딩은 런 타임(실행중)에 호출될 함수를 결정
  - virtual 예약어를 사용하여 가상함수를 정의해야 한다
  - 실제 객체 공간의 타입을 보고 호출할 함수를 결정

 7-3 가상 함수(Virtual Fcunktion)
  - virtual 예약어를 붙여 정의된 함수는 런 타임시, 포인터가 가리키는 공간의 타입에 따라
   호출할 함수를 결정
  - 포인터가 어떤 객체를 가리키는 가에 따라 호출될 함수를 결정
    => 다형성 구현
 
 7-4 업캐스팅
  - 부모클래스로 자식클래스 객체를 표현

 8 다형성
  - 다양한 형태나 성질
  - 하나의 클래스 객체를 여러개의 클래스로 표현하는 것
  - 동적바인딩을 이용한 Upcasting으로 구현 
  - 클래스를 기능별로 분류하여 기능적으로 통합적인 처리를 하기 위해서 만들어진다.

 8-1 순수 가상함수
  - 빈껍데기 함수. 다형성은 필요하지만 부모class에선 막상 필요없는 함수일때 사용
  - 사용시에는 오버라이드 해주어야 사용가능하다.
  - virtual 반환값 함수명() = 0;

 9 추상 class
  - 순수 가상함수를 하나라도 포함한 클래스
  - 부모의 역할을 완벽히 수행할 수 있도록 만든 class
  - 기본적으로 객체 생성 '불가'
   *순수 가상 함수는 자식class에서 오버라이드로 해주기 위해 존재
  - 주의 : 자식class도 오버라이드를 해주지 않으면 추상class화 

 10 다중상속
  *C++에선 권장하지 않는다.
  - 멤버가 겹치면 항상 지정해서 불러와야 한다.
  - 멤버가 겹치면 상속받은 클래스에서 오버라이드 해준다.(ex.부모class::함수명())
  - 상속받을때 virtual을 붙여주면 중복되는 부분을 생략해준다
   => class 자식 : virtual public 부모{};